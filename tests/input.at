# Copyright (c) 2013 Holger Weiss <holger@weiss.in-berlin.de>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

AT_BANNER([Unusual input.])

AT_SETUP([Multiline check result])
NSCA_CHECK([jupiter	0	jupiter
  is alive], [PROCESS_HOST_CHECK_RESULT;jupiter;0;jupiter\n  is alive])
AT_CLEANUP

AT_SETUP([Multiple check results])
printf 'jupiter\t0\tresult 1\n' >input
printf '\27' >>input
printf 'jupiter\t0\tresult 2\n' >>input
printf '\27' >>input
printf 'jupiter\t0\tresult 3\n' >>input
NSCA_CHECK([input], [dnl
PROCESS_HOST_CHECK_RESULT;jupiter;0;result 1
PROCESS_HOST_CHECK_RESULT;jupiter;0;result 2
PROCESS_HOST_CHECK_RESULT;jupiter;0;result 3], [], [], [], [], [], [0], [3])
AT_CLEANUP

AT_SETUP([Multiple results, colon-separated])
printf 'jupiter\t0\tresult 1\n' >input
printf ':' >>input
printf 'jupiter\t0\tresult 2\n' >>input
printf ':' >>input
printf 'jupiter\t0\tresult 3\n' >>input
NSCA_CHECK([input], [dnl
PROCESS_HOST_CHECK_RESULT;jupiter;0;result 1
PROCESS_HOST_CHECK_RESULT;jupiter;0;result 2
PROCESS_HOST_CHECK_RESULT;jupiter;0;result 3], [], [-e :], [], [], [], [0], [3])
AT_CLEANUP

AT_SETUP([Multiple monitoring commands])
cat >input <<'NSCA_EOF'
PROCESS_HOST_CHECK_RESULT;saturn;0;result 1
PROCESS_HOST_CHECK_RESULT;saturn;0;result 2
PROCESS_HOST_CHECK_RESULT;saturn;0;result 3
NSCA_EOF
ln input expout
NSCA_CHECK([input], [expout], [], [-C], [], [], [], [0], [3])
AT_CLEANUP

AT_SETUP([Result with trailing ETB and newline])
printf 'jupiter\t0\tjupiter is alive\n' >input
printf '\27\n' >>input
NSCA_CHECK([input], [PROCESS_HOST_CHECK_RESULT;jupiter;0;jupiter is alive])
AT_CLEANUP

AT_SETUP([Incorrect input format])
NSCA_CHECK([garbage], [],
  [[send_nsca: [FATAL] Input format incorrect, see the send_nsca(8) man page]],
  [], [], [], [], [1])
AT_CLEANUP

AT_SETUP([Data size exceeds max_command_size])
NSCA_CHECK([jupiter	0	jupiter is alive], [],
  [[send_nsca: [FATAL] Server said: FAIL PUSH data size too large]], [], [], [],
  [max_command_size = 10
   authorize "*" {
     password = "forty-two"
     commands = ".*"
   }], [1])
AT_CLEANUP

AT_SETUP([Data size exceeds PIPE_BUF])
cat >input <<NSCA_EOF
`printf "jupiter	0	%0${nsca_pipe_buf}d" 1`
NSCA_EOF
AT_CAPTURE_FILE([server.cfg])
cat >server.cfg <<NSCA_EOF
temp_directory = "`pwd`"
max_command_size = 0
authorize "*" {
  password = "forty-two"
  commands = ".*"
}
NSCA_EOF
NSCA_CHECK([input], [stdout])
AT_CHECK([[grep "^PROCESS_FILE;`pwd`/nsca\..\{6\};1$" stdout]], [0], [ignore])
AT_CLEANUP

dnl vim:set joinspaces textwidth=80 filetype=m4:
